// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=isAinstruction);
    Not(in=isAinstruction, out=isCinstruction);
    And(a=isCinstruction, b=instruction[5], out=destA);
    And(a=isCinstruction, b=instruction[4], out=destD);
    And(a=isCinstruction, b=instruction[3], out=destM);


    ARegister(in=aIn, out=aOut, load=aLoad);
    Or(a=isAinstruction, b=destA, out=aLoad);
    Mux16(a[15]=false, a[0..14]=instruction[0..14], 
          b=aluOut,
          sel=destA, out=aIn);
    
    
    DRegister(in=aluOut, out=x, load=destD);
    
    ALU(x=x, y=y, 
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6], 
        out=aluOut, zr=zr, ng=ng);
    Or(a=zr, b=ng, out=nps);
    Not(in=nps, out=ps);
    Mux16(a=aOut, b=inM, sel=instruction[12], out=y);
    

    And16(a=aluOut, b=aluOut, out=outM);
    And(a=destM, b=true, out=writeM);
    And16(a=aOut, b=aOut, out[0..14]=addressM);
    
    And(a=instruction[0], b=true, out=j3);
    And(a=instruction[1], b=true, out=j2);
    And(a=instruction[2], b=true, out=j1);

    And(a=j3, b=ps, out=jgt);
    And(a=j2, b=zr, out=jeq);
    And(a=j1, b=ng, out=jle);
    Or(a=jgt, b=jeq, out=t1);
    Or(a=t1, b=jle, out=t2);
    And(a=t2, b=isCinstruction, out=jmp);
    Not(in=jmp, out=njmp);

    PC(in=aOut, load=jmp, inc=njmp, reset=reset, out[0..14]=pc);    
}